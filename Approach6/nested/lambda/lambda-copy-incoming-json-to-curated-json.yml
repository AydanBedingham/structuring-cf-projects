AWSTemplateFormatVersion: "2010-09-09"

Description: "Ingestion Pipeline Lambda to copy incoming json to curated json bucket"

Parameters:

  Prefix:
    Type: String
    Description: "Resource name prefix used to help ensure resource name uniqueness and promote template portability between environments"
    Default: "ingest"

  CopyIncomingJsonToCuratedJsonLambdaName:
    Type: String
    Description: "Name of Lambda function for copying files from the Incoming Json Bucket to the Curated Json Bucket"

  IncomingJsonBucketName:
    Type: String
    Description: "Name of the existing Incoming Json Bucket"

  CuratedJsonBucketName:
    Type: String
    Description: "Name of the existing Curated Json Bucket"

  IncomingJsonToCuratedJsonQueueArn:
    Type: String
    Description: "ARN of the existing SQS Queue between Incoming Json and Curated Json Buckets"

Resources:

  CopyIncomingJsonToCuratedJsonLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Prefix}-${CopyIncomingJsonToCuratedJsonLambdaName}"
      Description: "Copies files from the Incoming Json Bucket to the Curated Json Bucket"
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt CopyIncomingJsonToCuratedJsonLambdaExecutionRole.Arn
      Timeout: 30 # cannot be greater than queue timeout
      Environment:
        Variables:
          DESTINATION_BUCKET_NAME: !Ref CuratedJsonBucketName
      Code:
        ZipFile: |
          import os
          import json
          import boto3
          import logging
          from urllib.parse import unquote_plus

          logger = logging.getLogger()
          logger.setLevel('INFO')

          s3 = boto3.resource('s3')

          destination_bucket_name = os.environ['DESTINATION_BUCKET_NAME']

          def process_s3_event_record(s3_event_record):
            
            source_bucket_name = s3_event_record['s3']['bucket']['name']
            key = unquote_plus(s3_event_record['s3']['object']['key'])
            
            logger.info(f"Copying '{source_bucket_name}/{key}' to '{destination_bucket_name}/{key}'")
            copy_source = {'Bucket': source_bucket_name, 'Key': key}
            destination_bucket = s3.Bucket(destination_bucket_name)
            destination_bucket.copy(copy_source, key)

          def lambda_handler(event, context):
            logger.info(f"event: {json.dumps(event)}")
            messages_to_reprocess = []
            
            for sqs_record in event['Records']:
              try:
                logger.info(f"Processing SQS Record with Message Id: {sqs_record['messageId']}")
                s3_event_records = json.loads(sqs_record['body'])['Records']
                for s3_event_record in s3_event_records:
                    process_s3_event_record(s3_event_record)
              except Exception as e:
                logger.warning(f"Failed to process SQS Record with Message Id: {sqs_record['messageId']}")
                messages_to_reprocess.append({"itemIdentifier": sqs_record['messageId']})
                logger.error(e)
            
            if len(messages_to_reprocess) > 0:
              logger.error(f"Batch Item Failures: {messages_to_reprocess}")
            
            batch_failure_response = {"batchItemFailures": messages_to_reprocess}
            return batch_failure_response

  CopyIncomingJsonToCuratedJsonLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !Ref IncomingJsonToCuratedJsonQueueArn
      FunctionName: !Ref CopyIncomingJsonToCuratedJsonLambda
      FunctionResponseTypes:
        - ReportBatchItemFailures
      Enabled: True

  CopyIncomingJsonToCuratedJsonLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Prefix}-lmbdaexec-copy-incoming-json-to-curated-json"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: AccessQueue
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !Ref IncomingJsonToCuratedJsonQueueArn
        - PolicyName: "ReadFromIncomingJsonBucket"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${IncomingJsonBucketName}"
                  - !Sub "arn:aws:s3:::${IncomingJsonBucketName}/*"
        - PolicyName: "WriteToCuratedJsonBucket"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${CuratedJsonBucketName}"
                  - !Sub "arn:aws:s3:::${CuratedJsonBucketName}/*"
